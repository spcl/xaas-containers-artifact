                      :-) GROMACS - gmx mdrun, 2025.0 (-:

Executable:   /users/ealnuaim/testcase0/gromacs-2025.0/build/bin/gmx
Data prefix:  /users/ealnuaim/testcase0/gromacs-2025.0 (source tree)
Working dir:  /users/ealnuaim/gromacs_benchmarks/TestcaseA_benchmarks/gromacs_testcase0_testcaseA/run_12
Command line:
  gmx mdrun -s /users/ealnuaim/GROMACS_TestCaseA/ion_channel.tpr -ntomp 64 -pin on -v -noconfout -dlb yes -nstlist 300 -nsteps 300

Reading file /users/ealnuaim/GROMACS_TestCaseA/ion_channel.tpr, VERSION 2020.3 (single precision)
Note: file tpx version 119, software tpx version 137
Overriding nsteps with value passed on the command line: 300 steps, 0.75 ps
Changing nstlist from 10 to 300, rlist from 1 to 1.81


Update groups can not be used for this system because there are three or more consecutively coupled constraints

Using 4 MPI threads
Using 64 OpenMP threads per tMPI thread


Note: Your choice of number of MPI ranks and amount of resources results in using 64 OpenMP threads per rank, which is most likely inefficient. The optimum is usually between 1 and 8 threads per rank.
starting mdrun 'Protein'
300 steps,      0.8 ps.
step 0step 100step 200vol 1.00  imb F 19% step 300, remaining wall clock time:     0 s          

Dynamic load balancing report:
 DLB was permanently on during the run per user request.
 Average load imbalance: 19.2%.
 The balanceable part of the MD step is 31%, load imbalance is computed from this.
 Part of the total run time spent waiting due to load imbalance: 6.0%.
 Steps where the load balancing was limited by -rdd, -rcon and/or -dds: X 0 % Z 0 %

NOTE: 6.0 % of the available CPU time was lost due to load imbalance
      in the domain decomposition.
      You can consider manually changing the decomposition (option -dd);
      e.g. by using fewer domains along the box dimension in which there is
      considerable inhomogeneity in the simulated system.

               Core t (s)   Wall t (s)        (%)
       Time:      478.885        1.873    25574.1
                 (ns/day)    (hour/ns)
Performance:       34.721        0.691

GROMACS reminds you: "It seems likely that significant software contributions to existing scientific software projects are not likely to be rewarded through the traditional reputation economy of science. Together these factors provide a reason to expect the over-production of independent scientific software packages, and the underproduction of collaborative projects in which later academics build on the work of earlier ones." (Howison & Herbsleb)

